import datetime
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, scoped_session, backref

from flask_login import UserMixin

Base = declarative_base()


class DB:
    def __init__(self, db_name, debug=False):
        connection_string = 'sqlite:///' + db_name
        self.engine = create_engine(connection_string, echo=debug)
        self.session_maker = scoped_session(sessionmaker(bind=self.engine))
        self.session = None

    def get_session(self):
        if not self.session:
            self.session = self.session_maker()

        return self.session

    def close_session(self):
        if self.session:
            self.session.close()

    def create_db(self):
        Base.metadata.create_all(self.engine)


class User(Base, UserMixin):
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True)
    login = Column(String)
    full_name = Column(String)
    password = Column(String)
    avatar = Column(String) #TODO obrazek BASE64




    def __str__(self):
        return "User: {} {}".format(self.login,
                                    self.full_name)


class Expense(Base):
    '''
    Each expense is related with user
    '''
    __tablename__ = 'expense'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    price = Column(Integer)
    description = Column(String)
    date_time = Column(DateTime, default=datetime.datetime.utcnow)

    category_id = Column(Integer, ForeignKey('category.id'))

    user_id = Column(Integer, ForeignKey('user.id'))
    expense = relationship('User', backref='expenses')


class Category(Base):
    '''
    Category can have many expenses. one to many
    '''
    __tablename__ = 'category'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    description = Column(String)

    expenses = relationship('Expense', backref='category')


class Report(Base):
    '''
    Table contains report generated by user
    '''
    __tablename__ = 'report'
    id = Column(Integer, primary_key=True)
    text = Column(String)


class PlanndeExpense(Base):
    __tablename__ = 'planned_expense'
    id = Column(Integer, primary_key=True)
    #TODO